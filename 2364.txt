#c++ 

class Solution {
public:
    long long countBadPairs(vector<int>& nums) {
        long long n = nums.size(); 

        unordered_map<int,int> freq;
        long long good_pairs=0;
        for(int i=0; i<n;i++){
            if(freq.count(nums[i]-i))
                good_pairs += freq[nums[i]-i];
            freq[nums[i]-i]++;
        }
        long long bad_pairs = n*(n-1)/2 - good_pairs;
        return bad_pairs;
    }
};

#python 

class Solution:
    def countBadPairs(self, nums: List[int]) -> int:
        hashmap = {}
        good_ = 0 
        for i in range(len(nums)):
            if hashmap.get(nums[i]-i,0):
                good_ += hashmap[nums[i]-i]
                hashmap[nums[i]-i]+=1
            else: hashmap[nums[i]-i]=1
        return int(len(nums)*(len(nums)-1)/2 - good_)

#java 

class Solution {
    public long countBadPairs(int[] nums) {
        long n = nums.length;
        
        // Insert & Count matches and add freq where (nums[i] - i) == (nums[j] - j)
        HashMap<Integer, Integer> freq = new HashMap<>();
        long goodPairs = 0;
        
        for (int i = 0; i < n; ++i) {
            int key = nums[i] - i;
            if (freq.containsKey(key)) {
                goodPairs += freq.get(key);
            }
            freq.put(key, freq.getOrDefault(key, 0) + 1);
        }
        
        long badPairs = n * (n - 1) / 2 - goodPairs;
        return badPairs;
    }
}

#javascript

/**
 * @param {number[]} nums
 * @return {number}
 */
var countBadPairs = function(nums) {
    let totalpairs = 0; 
    let goodpairs = 0; 
    let map = {}

    for(let i = 0; i < nums.length; i++){
        const diff = nums[i]-i
        totalpairs+=i
        if(diff in map){
            goodpairs+=map[diff]
            map[diff]++
            continue
        }
        map[diff] = 1
    }
    return totalpairs - goodpairs;
};